package wrappers.tmp;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import action.RemoveCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfHyperlink;
import controls.MfImageView;
import controls.MfText;
import controls.MfTextField;
import db.entity.HomeHeatingOrder;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Text;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class TrackMyOrderScreen extends SceneBase {

	public TrackMyOrderScreen(ISceneSwitcher sceneSwitcher, IClient client) throws Exception {
		super(sceneSwitcher, client);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("TrackMyOrderScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		MfImageView mainMenuCustomerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuCustomerScreen"));
		mainMenuCustomerScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuCustomerScreen"); });

		//entities instantiation
		HomeHeatingOrder homeHeatingOrder = new HomeHeatingOrder();

		//controls instantiation
		MfTextField orderIdControl = new MfTextField((TextField) _scene.lookup("#table$home_heating_order$order_id"));
		MfText orderStatusControl = new MfText((Text) _scene.lookup("#table$home_heating_order$order_status"));

		//tables instantiation
		BorderPane homeHeatingOrderBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$home_heating_order");
		Table<HomeHeatingOrder> homeHeatingOrderTableWrapper = new Table<HomeHeatingOrder>();
		MfTable<HomeHeatingOrder> homeHeatingOrderTable = new MfTable<HomeHeatingOrder>(HomeHeatingOrder.class);
		homeHeatingOrderTable.setEditable(false);
		MfSingleDecorator<HomeHeatingOrder> homeHeatingOrderSingleDecorator = new MfSingleDecorator<HomeHeatingOrder>();
		homeHeatingOrderTableWrapper.addDecorator(homeHeatingOrderSingleDecorator);
		homeHeatingOrderTableWrapper.setTable(homeHeatingOrderTable);
		homeHeatingOrderBp.setCenter(homeHeatingOrderTable);

		//initializations
		MfImageView filterHomeHeatingOrderControlIv = new MfImageView((ImageView) _scene.lookup("#action$collect$home_heating_order$$$iv"));
		ActionControl homeHeatingOrderfilterActionIv = new ActionControl();
		homeHeatingOrderfilterActionIv.setControl(filterHomeHeatingOrderControlIv);
		FilterCapability homeHeatingOrderFilterCapabilityIv = new FilterCapability();
		homeHeatingOrderFilterCapabilityIv.setQueryEntities(prepareQuery(homeHeatingOrder));
		homeHeatingOrderfilterActionIv.addCapability(homeHeatingOrderFilterCapabilityIv);
		homeHeatingOrderfilterActionIv.setClient(_client);
		homeHeatingOrderfilterActionIv.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				HomeHeatingOrder entity = (HomeHeatingOrder) ientity;
			}
		});

		MfHyperlink filterHomeHeatingOrderControlHl = new MfHyperlink((Hyperlink) _scene.lookup("#action$collect$home_heating_order$$$hl"));
		ActionControl homeHeatingOrderfilterActionHl = new ActionControl();
		homeHeatingOrderfilterActionHl.setControl(filterHomeHeatingOrderControlHl);
		FilterCapability homeHeatingOrderFilterCapabilityHl = new FilterCapability();
		homeHeatingOrderFilterCapabilityHl.setQueryEntities(prepareQuery(homeHeatingOrder));
		homeHeatingOrderfilterActionHl.addCapability(homeHeatingOrderFilterCapabilityHl);
		homeHeatingOrderfilterActionHl.setClient(_client);
		homeHeatingOrderfilterActionHl.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				HomeHeatingOrder entity = (HomeHeatingOrder) ientity;
			}
		});

		MfHyperlink removeHomeHeatingOrderControl = new MfHyperlink((Hyperlink) _scene.lookup("#action$remove$home_heating_order"));
		ActionControl homeHeatingOrderremoveAction = new ActionControl();
		homeHeatingOrderremoveAction.setControl(removeHomeHeatingOrderControl);
		RemoveCapability homeHeatingOrderRemoveCapability = new RemoveCapability();
		homeHeatingOrderRemoveCapability.addEntity(homeHeatingOrder);
		homeHeatingOrderremoveAction.addCapability(homeHeatingOrderRemoveCapability);
		homeHeatingOrderremoveAction.setClient(_client);
		homeHeatingOrderremoveAction.setCallback((response) -> {
			
		});

		//fields initializations
		orderIdControl.setField(homeHeatingOrder.getClass().getDeclaredField("_order_id"));
		orderIdControl.setEntity(homeHeatingOrder);

		orderStatusControl.setField(homeHeatingOrder.getClass().getDeclaredField("_order_status"));
		orderStatusControl.setEntity(homeHeatingOrder);


	}
	private Map<IEntity, Map<String, String>> prepareQuery(HomeHeatingOrder homeHeatingOrder) {
		Map<IEntity, Map<String, String>> map = new HashMap<IEntity, Map<String, String>>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		map.put(homeHeatingOrder, queryMap);
		return map;
	}
}
