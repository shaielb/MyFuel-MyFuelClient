package wrappers.tmp;

import java.util.HashMap;
import java.util.Map;

import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import db.entity.StationSupplyOrder;
import db.entity.SystemUser;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class OrdersStationManagerScreen extends SceneBase {

	public OrdersStationManagerScreen(ISceneSwitcher sceneSwitcher, IClient client) throws Exception {
		super(sceneSwitcher, client);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("OrdersStationManagerScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		MfImageView mainMenuStationManagerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuStationManagerScreen"));
		mainMenuStationManagerScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuStationManagerScreen"); });

		MfImageView supplyOrderConfirmPopScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$SupplyOrderConfirmPopScreen"));
		supplyOrderConfirmPopScreenControl.addEvent((event) -> { _switcher.switchScene("SupplyOrderConfirmPopScreen"); });

		//entities instantiation
		StationSupplyOrder stationSupplyOrder = new StationSupplyOrder();

		//tables instantiation
		BorderPane stationSupplyOrderBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$station_supply_order");
		Table<StationSupplyOrder> stationSupplyOrderTableWrapper = new Table<StationSupplyOrder>();
		MfTable<StationSupplyOrder> stationSupplyOrderTable = new MfTable<StationSupplyOrder>(StationSupplyOrder.class);
		stationSupplyOrderTable.setEditable(false);
		MfSingleDecorator<StationSupplyOrder> stationSupplyOrderSingleDecorator = new MfSingleDecorator<StationSupplyOrder>();
		stationSupplyOrderTableWrapper.addDecorator(stationSupplyOrderSingleDecorator);
		stationSupplyOrderTableWrapper.setTable(stationSupplyOrderTable);
		stationSupplyOrderBp.setCenter(stationSupplyOrderTable);


	}
	private Map<IEntity, Map<String, String>> prepareQuery(SystemUser systemUser) {
		Map<IEntity, Map<String, String>> map = new HashMap<IEntity, Map<String, String>>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		map.put(systemUser, queryMap);
		return map;
	}
}
