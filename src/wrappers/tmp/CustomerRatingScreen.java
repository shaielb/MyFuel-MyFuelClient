package wrappers.tmp;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import db.entity.AnalyticalRatings;
import db.entity.CustomersRatings;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class CustomerRatingScreen extends SceneBase {

	public CustomerRatingScreen(ISceneSwitcher sceneSwitcher, IClient client) throws Exception {
		super(sceneSwitcher, client);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("CustomerRatingScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		MfImageView mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		//entities instantiation
		CustomersRatings customersRatings = new CustomersRatings();
		AnalyticalRatings analyticalRatings = new AnalyticalRatings();

		//tables instantiation
		BorderPane customersRatingsBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$customers_ratings");
		Table<CustomersRatings> customersRatingsTableWrapper = new Table<CustomersRatings>();
		MfTable<CustomersRatings> customersRatingsTable = new MfTable<CustomersRatings>(CustomersRatings.class);
		customersRatingsTable.setEditable(false);
		MfSingleDecorator<CustomersRatings> customersRatingsSingleDecorator = new MfSingleDecorator<CustomersRatings>();
		customersRatingsTableWrapper.addDecorator(customersRatingsSingleDecorator);
		customersRatingsTableWrapper.setTable(customersRatingsTable);
		customersRatingsBp.setCenter(customersRatingsTable);

		//initializations
		MfImageView filterAnalyticalRatingsControl = new MfImageView((ImageView) _scene.lookup("#action$collect$analytical_ratings"));
		ActionControl analyticalRatingsfilterAction = new ActionControl();
		analyticalRatingsfilterAction.setControl(filterAnalyticalRatingsControl);
		FilterCapability analyticalRatingsFilterCapability = new FilterCapability();
		analyticalRatingsFilterCapability.setQueryEntities(prepareQuery(analyticalRatings));
		analyticalRatingsfilterAction.addCapability(analyticalRatingsFilterCapability);
		analyticalRatingsfilterAction.setClient(_client);
		analyticalRatingsfilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				AnalyticalRatings entity = (AnalyticalRatings) ientity;
			}
		});


	}
	private Map<IEntity, Map<String, String>> prepareQuery(AnalyticalRatings analyticalRatings) {
		Map<IEntity, Map<String, String>> map = new HashMap<IEntity, Map<String, String>>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		map.put(analyticalRatings, queryMap);
		return map;
	}
}
