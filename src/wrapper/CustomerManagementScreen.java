package wrapper;

import javafx.scene.layout.BorderPane;
import javafx.fxml.FXMLLoader;
import db.entity.*;
import adapter.base.ControlAdapter;
import java.util.HashSet;
import widgets.table.Table;
import application.Main;
import controls.*;
import annotations.AutoGenerated;
import java.util.HashMap;
import javafx.scene.Parent;
import sceneswitch.SceneBase;
import java.util.Map;
import java.util.Collection;
import table.MfTable;
import widgets.table.*;
import client.IClient;

import javafx.scene.Scene;
import javafx.scene.control.*;
import action.*;
import db.interfaces.IEntity;
import javafx.scene.image.ImageView;
import java.util.Set;
import javafx.scene.text.Text;

@AutoGenerated
public class CustomerManagementScreen extends SceneBase {

	public CustomerManagementScreen(ISceneSwitcher sceneSwitcher, IClient client) throws Exception {
		super(sceneSwitcher, client);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("CustomerManagementScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		MfImageView mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		MfImageView customerCharacterizationReportScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$CustomerCharacterizationReportScreen"));
		customerCharacterizationReportScreenControl.addEvent((event) -> { _switcher.switchScene("CustomerCharacterizationReportScreen"); });

		//entities instantiation
		Customer customer = new Customer();
		Person person = new Person();

		//entities assignments
		customer.setPerson(person);

		//controls instantiation
		MfTextField customerIdControl = new MfTextField((TextField) _scene.lookup("#table$customer$customer_id"));
		MfTextField firstNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$first_name"));
		MfTextField lastNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$last_name"));
		MfTextField phoneNumberControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$phone_number"));

		//tables instantiation
		BorderPane customerBp = (BorderPane) _scene.lookup("#uitable$editable$multi$customer");
		Table<Customer> customerTableWrapper = new Table<Customer>();
		MfTable<Customer> customerTable = new MfTable<Customer>(Customer.class);
		customerTable.setEditable(true);
		MfMultiDecorator<Customer> customerMultiDecorator = new MfMultiDecorator<Customer>();
		customerTableWrapper.addDecorator(customerMultiDecorator);
		customerTableWrapper.setTable(customerTable);
		customerBp.setCenter(customerTable);

		//initializations
		MfImageView filterCustomerControl = new MfImageView((ImageView) _scene.lookup("#action$collect$customer"));
		ActionControl customerfilterAction = new ActionControl();
		customerfilterAction.setControl(filterCustomerControl);
		FilterCapability customerFilterCapability = new FilterCapability();
		customerFilterCapability.setQueryEntities(prepareQuery(customer));
		customerfilterAction.addCapability(customerFilterCapability);
		customerfilterAction.setClient(_client);
		customerfilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				Customer entity = (Customer) ientity;
			}
		});

		//fields initializations
		customerIdControl.setField(customer.getClass().getDeclaredField("_customer_id"));
		customerIdControl.setEntity(customer);

		firstNameControl.setField(person.getClass().getDeclaredField("_first_name"));
		firstNameControl.setEntity(person);

		lastNameControl.setField(person.getClass().getDeclaredField("_last_name"));
		lastNameControl.setEntity(person);

		phoneNumberControl.setField(person.getClass().getDeclaredField("_phone_number"));
		phoneNumberControl.setEntity(person);


	}
	private Map<IEntity, Map<String, String>> prepareQuery(Customer customer) {
		Map<IEntity, Map<String, String>> map = new HashMap<IEntity, Map<String, String>>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		map.put(customer, queryMap);
		return map;
	}
}
