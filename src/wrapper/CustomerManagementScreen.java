package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import controls.MfTextField;
import db.entity.Customer;
import db.entity.Person;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfMultiDecorator;
import widgets.table.Table;

@AutoGenerated
public class CustomerManagementScreen extends SceneBase {

	private Customer _customer;
	private Person _person;

	private MfImageView _mainMenuMarketingScreenControl;
	private MfTextField _customerIdControl;
	private Table<Customer> _customerTableWrapper;
	private MfTable<Customer> _customerTable;
	private MfImageView _customerCharacterizationReportScreenControl;
	private MfTextField _firstNameControl;
	private MfTextField _lastNameControl;
	private MfTextField _phoneNumberControl;
	private MfImageView _filterCustomerControl;
	private ActionControl _customerfilterAction;

	public CustomerManagementScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("CustomerManagementScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		_mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		_customerCharacterizationReportScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$CustomerCharacterizationReportScreen"));
		_customerCharacterizationReportScreenControl.addEvent((event) -> { _switcher.switchScene("CustomerCharacterizationReportScreen"); });

		//entities instantiation
		_customer = new Customer();
		_person = new Person();

		//entities assignments
		_customer.setPerson(_person);

		//controls instantiation
		_customerIdControl = new MfTextField((TextField) _scene.lookup("#table$customer$customer_id"));
		_firstNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$first_name"));
		_lastNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$last_name"));
		_phoneNumberControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$phone_number"));

		//tables instantiation
		BorderPane customerBp = (BorderPane) _scene.lookup("#uitable$editable$multi$customer");
		_customerTableWrapper = new Table<Customer>();
		_customerTable = new MfTable<Customer>(Customer.class);
		_customerTable.setEditable(true);
		MfMultiDecorator<Customer> customerMultiDecorator = new MfMultiDecorator<Customer>();
		_customerTableWrapper.addDecorator(customerMultiDecorator);
		_customerTableWrapper.setTable(_customerTable);
		customerBp.setCenter(_customerTable);

		//initializations
		_filterCustomerControl = new MfImageView((ImageView) _scene.lookup("#action$collect$customer"));
		_customerfilterAction = new ActionControl();
		_customerfilterAction.setControl(_filterCustomerControl);
		FilterCapability customerFilterCapability = new FilterCapability();
		customerFilterCapability.setQueryContainers(prepareQuery(_customer));
		_customerfilterAction.addCapability(customerFilterCapability);
		_customerfilterAction.setClient(_client);
		_customerfilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				Customer entity = (Customer) ientity;
			}
		});

		//fields initializations
		_customerIdControl.setField(_customer.getClass().getDeclaredField("_customer_id"));
		_customerIdControl.setEntity(_customer);

		_firstNameControl.setField(_person.getClass().getDeclaredField("_first_name"));
		_firstNameControl.setEntity(_person);

		_lastNameControl.setField(_person.getClass().getDeclaredField("_last_name"));
		_lastNameControl.setEntity(_person);

		_phoneNumberControl.setField(_person.getClass().getDeclaredField("_phone_number"));
		_phoneNumberControl.setEntity(_person);


	}

	private List<QueryContainer> prepareQuery(Customer customer) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		QueryContainer container = new QueryContainer();
		container.setQueryEntity(customer);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}

	public Customer getCustomer() {
		 return _customer;
	}

	public void setCustomer(Customer customer) {
		 _customer = customer;
	}

	public Person getPerson() {
		 return _person;
	}

	public void setPerson(Person person) {
		 _person = person;
	}
}
