package wrapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import controls.MfNumberField;
import controls.MfTextField;
import db.entity.Address;
import db.entity.Customer;
import db.entity.CustomersView;
import db.entity.Payment;
import db.entity.Person;
import db.entity.SystemUser;
import db.interfaces.IEntity;
import handler.UiHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import messages.QueryContainer;
import messages.Request;
import messages.request.IFilter;
import messages.response.ResponseEvent;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;
import table.MfTable;
import utilities.StringUtil;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class CustomerManagementScreen extends SceneBase {

	private CustomersView _customersView;

	private MfImageView _mainMenuMarketingScreenControl;
	private MfNumberField _idControl;
	private Table<CustomersView> _customersViewTableWrapper;
	private MfTable<CustomersView> _customersViewTable;
	private MfImageView _updatePersonalDetailsScreenControl;
	private MfTextField _firstNameControl;
	private MfTextField _lastNameControl;
	private MfTextField _phoneNumberControl;
	private MfImageView _filterCustomersViewControl;
	private ActionControl _customersViewfilterAction;
	
	private MfSingleDecorator<CustomersView> _customersViewSingleDecorator;
	
	private Object _lock = new Object();

	public CustomerManagementScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("CustomerManagementScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		_mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		_updatePersonalDetailsScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$UpdatePersonalDetailsScreen"));
		_updatePersonalDetailsScreenControl.addEvent((event) -> {
			try {
				Collection<IEntity> entites = collectCustomerEntities();
				_switcher.switchScene("UpdatePersonalDetailsScreen", entites.toArray(new IEntity[entites.size()])); 
			} catch (Exception e) {
				e.printStackTrace();
			}
			});

		//entities instantiation
		if (_customersView == null) {
			_customersView = new CustomersView();
		}

		//controls instantiation
		_idControl = new MfNumberField((TextField) _scene.lookup("#table$customers_view$id"), Integer.class);
		_firstNameControl = new MfTextField((TextField) _scene.lookup("#table$customers_view$first_name"));
		_lastNameControl = new MfTextField((TextField) _scene.lookup("#table$customers_view$last_name"));
		_phoneNumberControl = new MfTextField((TextField) _scene.lookup("#table$customers_view$phone_number"));

		//tables instantiation
		BorderPane customersViewBp = (BorderPane) _scene.lookup("#uitable$noneeditable$single$customers_view");
		_customersViewTableWrapper = new Table<CustomersView>();
		_customersViewTable = new MfTable<CustomersView>(CustomersView.class);
		_customersViewTable.setEditable(false);
		_customersViewSingleDecorator = new MfSingleDecorator<CustomersView>();
		_customersViewTableWrapper.addDecorator(_customersViewSingleDecorator);
		_customersViewTableWrapper.setTable(_customersViewTable);
		customersViewBp.setCenter(_customersViewTable);

		//initializations
		_filterCustomersViewControl = new MfImageView((ImageView) _scene.lookup("#action$collect$customers_view"));
		_filterCustomersViewControl.
		setMouseImages("@resource/images/edit_btn.png", "@resource/images/edit_overbtn.png", "@resource/images/edit_clickbtn.png");
		_customersViewfilterAction = new ActionControl();
		_customersViewfilterAction.setControl(_filterCustomersViewControl);
		FilterCapability customersViewFilterCapability = new FilterCapability();
		customersViewFilterCapability.setQueryContainers(prepareQuery(_customersView));
		_customersViewfilterAction.addCapability(customersViewFilterCapability);
		_customersViewfilterAction.setClient(_client);
		_customersViewfilterAction.setPreSend((request) -> {
			Map<String, String> queryMap = ((Request) request).getQueryContainers().get(0).getQueryMap();
			try {
				queryMap.clear();
				UiHandler.iterateFields(CustomersView.class, (field, colName, index) -> {
					Object value = field.get(_customersView);
					if (value != null) {
						if (value instanceof String) {
							if (!StringUtil.isEmpty((String) value)) {
								queryMap.put(colName, "=");
							}
						}
						else {
							queryMap.put(colName, "=");
						}
					}
				});
			} catch (Exception e) {
				e.printStackTrace();
			}
			return true;
		});
		_customersViewfilterAction.setCallback((response) -> {
			Collection<CustomersView> entities = response.getEntitiesAsType();
			_customersViewTable.setRows(entities);
		});

		//fields initializations
		_idControl.setField(_customersView.getClass().getDeclaredField("_id"));
		_idControl.setEntity(_customersView);

		_firstNameControl.setField(_customersView.getClass().getDeclaredField("_first_name"));
		_firstNameControl.setEntity(_customersView);

		_lastNameControl.setField(_customersView.getClass().getDeclaredField("_last_name"));
		_lastNameControl.setEntity(_customersView);

		_phoneNumberControl.setField(_customersView.getClass().getDeclaredField("_phone_number"));
		_phoneNumberControl.setEntity(_customersView);


	}

	@Override
	protected void onLoad() throws IOException {
		IFilter filterRequest = _client.getFilterRequest();
		filterRequest.addQueryEntity(_customersView);
		ResponseEvent responseEvent = _client.sendRequest(filterRequest);
		responseEvent.continueWith((response) -> {
			if (response.isPassed()) {
				_customersViewTable.setRows(response.getEntitiesAsType());
			}
			else {
				UiHandler.showAlert(AlertType.ERROR, "Customers Collections", "", response.getDescription());
			}
		});
	}
	
	private Collection<IEntity> collectCustomerEntities() throws Exception {
		IFilter filterRequest = _client.getFilterRequest();
		CustomersView cv = (CustomersView) _customersViewSingleDecorator.getSelectedEntity();
		
		Customer customer = new Customer();
		SystemUser sysUser = new SystemUser();
		Person person = new Person();
		Address address = new Address();
		Payment payment = new Payment();
		
		QueryContainer customerQueryContainer = new QueryContainer(customer);
		QueryContainer sysUserQueryContainer = new QueryContainer(sysUser);
		QueryContainer personQueryContainer = new QueryContainer(person);
		QueryContainer addressQueryContainer = new QueryContainer(address);
		QueryContainer paymentQueryContainer = new QueryContainer(payment);
		
		customer.setCustomerId(cv.getId());
		customerQueryContainer.addQueryCondition("customer_id", "=");
		sysUserQueryContainer.addQueryCondition("id", "=");
		personQueryContainer.addQueryCondition("id", "=");
		addressQueryContainer.addQueryCondition("id", "=");
		paymentQueryContainer.addQueryCondition("id", "=");
		
		customerQueryContainer.addNext(sysUserQueryContainer);
		customerQueryContainer.addNext(personQueryContainer);
		customerQueryContainer.addNext(addressQueryContainer);
		customerQueryContainer.addNext(paymentQueryContainer);
		
		Collection<IEntity>[] results = new Collection[1];
		filterRequest.addQueryContainer(customerQueryContainer);
		ResponseEvent responseEvent = _client.sendRequest(filterRequest);
		responseEvent.continueWith((response) -> {
			if (response.isPassed()) {
				results[0] = response.getEntities();
				synchronized (_lock) {
					_lock.notifyAll();
				}
			}
			else {
				UiHandler.showAlert(AlertType.ERROR, "Customers Collections", "", response.getDescription());
			}
		});
		synchronized (_lock) {
			_lock.wait();
		}
		return results[0];
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
	}

	private List<QueryContainer> prepareQuery(CustomersView customersView) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();

		Map<String, String> queryMap = new HashMap<String, String>();

		QueryContainer container = new QueryContainer();
		container.setQueryEntity(customersView);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}


	public CustomersView getCustomersView() {
		return _customersView;
	}

	public void setCustomersView(CustomersView customersView) {
		_customersView = customersView;
	}
}
