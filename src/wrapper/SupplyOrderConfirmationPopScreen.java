package wrapper;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import action.ActionControl;
import action.UpdateCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import controls.MfText;
import db.entity.FuelingPurchase;
import db.entity.Station;
import db.entity.StationSupplyOrder;
import db.entity.StationsFuel;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import sceneswitch.SceneBase;

@AutoGenerated
public class SupplyOrderConfirmationPopScreen extends SceneBase {

	public SupplyOrderConfirmationPopScreen(ISceneSwitcher sceneSwitcher, IClient client) throws Exception {
		super(sceneSwitcher, client);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("SupplyOrderConfirmationPopScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		MfImageView ordersStationManagerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$OrdersStationManagerScreen"));
		ordersStationManagerScreenControl.addEvent((event) -> { _switcher.switchScene("OrdersStationManagerScreen"); });

		//entities instantiation
		StationSupplyOrder stationSupplyOrder = new StationSupplyOrder();
		Station station = new Station();
		StationsFuel stationsFuel = new StationsFuel();

		//entities assignments
		stationSupplyOrder.setStation(station);
		stationsFuel.setStation(station);

		//controls instantiation
		MfText orderIdControl = new MfText((Text) _scene.lookup("#table$station$station_supply_order$order_id"));
		MfText fuelEnumControl = new MfText((Text) _scene.lookup("#table$station$station_supply_order$fuel_enum"));
		MfText amountControl = new MfText((Text) _scene.lookup("#table$station$station_supply_order$amount"));
		MfText stationNameControl = new MfText((Text) _scene.lookup("#table$station$station_name"));
		MfText addressControl = new MfText((Text) _scene.lookup("#table$station$address"));
		MfText currentAmountControl = new MfText((Text) _scene.lookup("#table$station$stations_fuel$current_amount"));

		//initializations
		MfImageView updateStationSupplyOrderControl = new MfImageView((ImageView) _scene.lookup("#action$update$station_supply_order"));
		ActionControl stationSupplyOrderupdateAction = new ActionControl();
		stationSupplyOrderupdateAction.setControl(updateStationSupplyOrderControl);
		UpdateCapability stationSupplyOrderUpdateCapability = new UpdateCapability();
		Set<IEntity> stationSupplyOrderUpdateEntities = new HashSet<IEntity>();
		stationSupplyOrderUpdateCapability.setEntities(stationSupplyOrderUpdateEntities);
		stationSupplyOrderupdateAction.addCapability(stationSupplyOrderUpdateCapability);
		stationSupplyOrderupdateAction.setClient(_client);
		stationSupplyOrderupdateAction.setCallback((response) -> {
			
		});

		//fields initializations
		orderIdControl.setField(stationSupplyOrder.getClass().getDeclaredField("_order_id"));
		orderIdControl.setEntity(stationSupplyOrder);

		fuelEnumControl.setField(stationSupplyOrder.getClass().getDeclaredField("_fuel_enum"));
		fuelEnumControl.setEntity(stationSupplyOrder);

		amountControl.setField(stationSupplyOrder.getClass().getDeclaredField("_amount"));
		amountControl.setEntity(stationSupplyOrder);

		stationNameControl.setField(station.getClass().getDeclaredField("_station_name"));
		stationNameControl.setEntity(station);

		addressControl.setField(station.getClass().getDeclaredField("_address"));
		addressControl.setEntity(station);

		currentAmountControl.setField(stationsFuel.getClass().getDeclaredField("_current_amount"));
		currentAmountControl.setEntity(stationsFuel);


	}
	private Map<IEntity, Map<String, String>> prepareQuery(FuelingPurchase fuelingPurchase) {
		Map<IEntity, Map<String, String>> map = new HashMap<IEntity, Map<String, String>>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		map.put(fuelingPurchase, queryMap);
		return map;
	}
}
