package wrapper;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import action.ActionControl;
import action.UpdateCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import db.entity.FuelingPurchase;
import db.entity.SpecialSalesEnum;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class SalesManagementScreen extends SceneBase {

	public SalesManagementScreen(ISceneSwitcher sceneSwitcher, IClient client) throws Exception {
		super(sceneSwitcher, client);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("SalesManagementScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		MfImageView mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		MfImageView saleReportScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$SaleReportScreen"));
		saleReportScreenControl.addEvent((event) -> { _switcher.switchScene("SaleReportScreen"); });

		//entities instantiation
		SpecialSalesEnum specialSalesEnum = new SpecialSalesEnum();

		//tables instantiation
		BorderPane specialSalesEnumBp = (BorderPane) _scene.lookup("#uitable$editable$single$special_sales_enum");
		Table<SpecialSalesEnum> specialSalesEnumTableWrapper = new Table<SpecialSalesEnum>();
		MfTable<SpecialSalesEnum> specialSalesEnumTable = new MfTable<SpecialSalesEnum>(SpecialSalesEnum.class);
		specialSalesEnumTable.setEditable(true);
		MfSingleDecorator<SpecialSalesEnum> specialSalesEnumSingleDecorator = new MfSingleDecorator<SpecialSalesEnum>();
		specialSalesEnumTableWrapper.addDecorator(specialSalesEnumSingleDecorator);
		specialSalesEnumTableWrapper.setTable(specialSalesEnumTable);
		specialSalesEnumBp.setCenter(specialSalesEnumTable);

		//initializations
		MfImageView updateSpecialSalesEnumControl = new MfImageView((ImageView) _scene.lookup("#action$update$special_sales_enum"));
		ActionControl specialSalesEnumupdateAction = new ActionControl();
		specialSalesEnumupdateAction.setControl(updateSpecialSalesEnumControl);
		UpdateCapability specialSalesEnumUpdateCapability = new UpdateCapability();
		Set<IEntity> specialSalesEnumUpdateEntities = new HashSet<IEntity>();
		specialSalesEnumUpdateCapability.setEntities(specialSalesEnumUpdateEntities);
		specialSalesEnumupdateAction.addCapability(specialSalesEnumUpdateCapability);
		specialSalesEnumupdateAction.setClient(_client);
		specialSalesEnumupdateAction.setCallback((response) -> {
			
		});


	}
	private Map<IEntity, Map<String, String>> prepareQuery(FuelingPurchase fuelingPurchase) {
		Map<IEntity, Map<String, String>> map = new HashMap<IEntity, Map<String, String>>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		map.put(fuelingPurchase, queryMap);
		return map;
	}
}
