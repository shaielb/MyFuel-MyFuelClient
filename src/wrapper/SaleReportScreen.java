package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import adapter.base.ControlAdapter;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfDatePicker;
import controls.MfImageView;
import controls.MfText;
import db.entity.FuelingPurchase;
import db.entity.SpecialSalesEnum;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Text;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class SaleReportScreen extends SceneBase {

	private SpecialSalesEnum _specialSalesEnum;
	private FuelingPurchase _fuelingPurchase;

	private MfImageView _maimMenuMarketingScreenControl;
	private MfImageView _salesManagmentScreenControl;
	private MfDatePicker _dateTimeControlDt;
	private Table<FuelingPurchase> _fuelingPurchaseTableWrapper;
	private MfTable<FuelingPurchase> _fuelingPurchaseTable;
	private MfImageView _filterFuelingPurchaseControl;
	private ActionControl _fuelingPurchasefilterAction;
	private MfText _titleKeyControl;

	public SaleReportScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("SaleReportScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_maimMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MaimMenuMarketingScreen"));
		_maimMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MaimMenuMarketingScreen"); });

		_salesManagmentScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$SalesManagmentScreen"));
		_salesManagmentScreenControl.addEvent((event) -> { _switcher.switchScene("SalesManagmentScreen"); });

		//entities instantiation
		_specialSalesEnum = new SpecialSalesEnum();
		_fuelingPurchase = new FuelingPurchase();

		//entities assignments
		_fuelingPurchase.setSpecialSalesEnum(_specialSalesEnum);

		//controls instantiation
		_dateTimeControlDt = new MfDatePicker((DatePicker) _scene.lookup("#table$special_sales_enum$fueling_purchase$date_time$$$dt"));
		_titleKeyControl = new MfText((Text) _scene.lookup("#table$special_sales_enum$title_key"));

		//tables instantiation
		BorderPane fuelingPurchaseBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$fueling_purchase");
		_fuelingPurchaseTableWrapper = new Table<FuelingPurchase>();
		_fuelingPurchaseTable = new MfTable<FuelingPurchase>(FuelingPurchase.class);
		_fuelingPurchaseTable.setEditable(false);
		MfSingleDecorator<FuelingPurchase> fuelingPurchaseSingleDecorator = new MfSingleDecorator<FuelingPurchase>();
		_fuelingPurchaseTableWrapper.addDecorator(fuelingPurchaseSingleDecorator);
		_fuelingPurchaseTableWrapper.setTable(_fuelingPurchaseTable);
		fuelingPurchaseBp.setCenter(_fuelingPurchaseTable);

		//initializations
		_filterFuelingPurchaseControl = new MfImageView((ImageView) _scene.lookup("#action$collect$fueling_purchase"));
		_fuelingPurchasefilterAction = new ActionControl();
		_fuelingPurchasefilterAction.setControl(_filterFuelingPurchaseControl);
		FilterCapability fuelingPurchaseFilterCapability = new FilterCapability();
		fuelingPurchaseFilterCapability.setQueryContainers(prepareQuery(_fuelingPurchase));
		_fuelingPurchasefilterAction.addCapability(fuelingPurchaseFilterCapability);
		_fuelingPurchasefilterAction.setClient(_client);
		_fuelingPurchasefilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				FuelingPurchase entity = (FuelingPurchase) ientity;
			}
		});

		//fields initializations
		_dateTimeControlDt.setField(_fuelingPurchase.getClass().getDeclaredField("_date_time"));
		_dateTimeControlDt.setEntity(_fuelingPurchase);

		_dateTimeControlDt.setField(_fuelingPurchase.getClass().getDeclaredField("_date_time"));
		_dateTimeControlDt.setEntity(_fuelingPurchase);

		_titleKeyControl.setField(_specialSalesEnum.getClass().getDeclaredField("_title_key"));
		_titleKeyControl.setEntity(_specialSalesEnum);

		//grouping
		groupControls(new ControlAdapter[] { _dateTimeControlDt, _dateTimeControlDt });

	}

	private List<QueryContainer> prepareQuery(FuelingPurchase fuelingPurchase) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		QueryContainer container = new QueryContainer();
		container.setQueryEntity(fuelingPurchase);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}

	public SpecialSalesEnum getSpecialSalesEnum() {
		 return _specialSalesEnum;
	}

	public void setSpecialSalesEnum(SpecialSalesEnum specialSalesEnum) {
		 _specialSalesEnum = specialSalesEnum;
	}

	public FuelingPurchase getFuelingPurchase() {
		 return _fuelingPurchase;
	}

	public void setFuelingPurchase(FuelingPurchase fuelingPurchase) {
		 _fuelingPurchase = fuelingPurchase;
	}
}
