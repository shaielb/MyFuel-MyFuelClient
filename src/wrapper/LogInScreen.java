package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import controls.MfPasswordField;
import controls.MfTextField;
import db.entity.Customer;
import db.entity.Employee;
import db.entity.SystemUser;
import db.interfaces.IEntity;
import handler.UiHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.SceneBase;

@AutoGenerated
public class LogInScreen extends SceneBase {

	private SystemUser _systemUser;

	private MfTextField _userNameControl;
	private MfPasswordField _userPasswordControl;
	private MfImageView _filterSystemUserControl;
	private ActionControl _systemUserfilterAction;
	// preserved members start
	private Map<String, String> _screensMap = new HashMap<String, String>() {{
		put("Station Manager", "MainMenuStationManagerScreen");
		put("Customer", "MainMenuCustomerScreen");
		put("Company Markteing Representative", "MainMenuMarketingScreen");
		put("MyFuel Marketing Representative", "MainMenuMarketingScreen");
	}};
	// preserved members end


	public LogInScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("LogInScreen.fxml"));
		_scene = new Scene(root);

		//entities instantiation
		_systemUser = new SystemUser();

		//controls instantiation
		_userNameControl = new MfTextField((TextField) _scene.lookup("#table$system_user$user_name"));
		_userPasswordControl = new MfPasswordField((PasswordField) _scene.lookup("#table$system_user$user_password"));

		//initializations
		_filterSystemUserControl = new MfImageView((ImageView) _scene.lookup("#action$collect$system_user"));
		_systemUserfilterAction = new ActionControl();
		_systemUserfilterAction.setControl(_filterSystemUserControl);
		FilterCapability systemUserFilterCapability = new FilterCapability();
		systemUserFilterCapability.setQueryContainers(prepareQuery(_systemUser));
		_systemUserfilterAction.addCapability(systemUserFilterCapability);
		_systemUserfilterAction.setClient(_client);
		_systemUserfilterAction.setCallback((response) -> {
			// #action$collect$system_user callback start
			Collection<IEntity> entities = response.getEntities();
			if (entities == null || entities.size() == 0) {
				UiHandler.showAlert(AlertType.ERROR, 
						"No Such User", "User Was Not Found", 
						"One Of The Details Providede Is Incorrect, Please Try Again");
			}
			for (IEntity ientity : entities) {
				SystemUser entity = (SystemUser) ientity;
				String permissions = entity.getPermission();
				UiHandler.RunUi(() -> {
					_switcher.switchScene(_screensMap.get(permissions));
				});
			}
			// #action$collect$system_user callback end
		});

		//fields initializations
		_userNameControl.setField(_systemUser.getClass().getDeclaredField("_user_name"));
		_userNameControl.setEntity(_systemUser);

		_userPasswordControl.setField(_systemUser.getClass().getDeclaredField("_user_password"));
		_userPasswordControl.setEntity(_systemUser);


	}
	// #action$collect$system_user prepareQuery start
	private List<QueryContainer> prepareQuery(SystemUser systemUser) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();

		Map<String, String> userQueryMap = new HashMap<String, String>();
		userQueryMap.put("user_name", "=");
		userQueryMap.put("user_password", "=");
		QueryContainer userContainer = new QueryContainer();
		userContainer.setQueryEntity(systemUser);
		userContainer.setQueryMap(userQueryMap);

		Customer customer = new Customer();
		QueryContainer customerContainer = new QueryContainer();
		Map<String, String> customerQueryMap = new HashMap<String, String>();
		customerQueryMap.put("system_user_fk", "=");
		customer.setSystemUser(systemUser);
		customerContainer.setQueryEntity(customer);
		customerContainer.setQueryMap(customerQueryMap);

		userContainer.addNext(customerContainer);

		Employee employee = new Employee();
		QueryContainer employeeContainer = new QueryContainer();
		Map<String, String> employeeQueryMap = new HashMap<String, String>();
		employeeQueryMap.put("system_user_fk", "=");
		employee.setSystemUser(systemUser);
		employeeContainer.setQueryEntity(employee);
		employeeContainer.setQueryMap(employeeQueryMap);

		userContainer.addNext(employeeContainer);

		containers.add(userContainer);
		return containers;
	}
	// #action$collect$system_user prepareQuery end


	public SystemUser getSystemUser() {
		return _systemUser;
	}

	public void setSystemUser(SystemUser systemUser) {
		_systemUser = systemUser;
	}
}
