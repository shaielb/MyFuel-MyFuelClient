package wrapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import action.ActionControl;
import action.UpdateCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import db.entity.HomeHeatingOrder;
import db.interfaces.IEntity;
import handler.UiHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import messages.request.IFilter;
import messages.response.ResponseEvent;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class HomeHeatingManagementScreen extends SceneBase {
	
	private static String InProcess = "In process";
	private static String Done = "Done";

	private HomeHeatingOrder _homeHeatingOrder;

	private MfImageView _mainMenuSupplierScreenControl;
	private Table<HomeHeatingOrder> _homeHeatingOrderTableWrapper;
	private MfTable<HomeHeatingOrder> _homeHeatingOrderTable;
	private MfImageView _updateHomeHeatingOrderControl;
	private ActionControl _homeHeatingOrderupdateAction;

	public HomeHeatingManagementScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("HomeHeatingManagementScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuSupplierScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuSupplierScreen"));
		_mainMenuSupplierScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuSupplierScreen"); });

		//entities instantiation
		if (_homeHeatingOrder == null) {
			_homeHeatingOrder = new HomeHeatingOrder();
		}

		//tables instantiation
		BorderPane homeHeatingOrderBp = (BorderPane) _scene.lookup("#uitable$editable$single$home_heating_order");
		_homeHeatingOrderTableWrapper = new Table<HomeHeatingOrder>();
		_homeHeatingOrderTable = new MfTable<HomeHeatingOrder>(HomeHeatingOrder.class);
		_homeHeatingOrderTable.setEditable(true);
		MfSingleDecorator<HomeHeatingOrder> homeHeatingOrderSingleDecorator = new MfSingleDecorator<HomeHeatingOrder>();
		_homeHeatingOrderTableWrapper.addDecorator(homeHeatingOrderSingleDecorator);
		_homeHeatingOrderTableWrapper.setTable(_homeHeatingOrderTable);
		homeHeatingOrderBp.setCenter(_homeHeatingOrderTable);

		//initializations
		_updateHomeHeatingOrderControl = new MfImageView((ImageView) _scene.lookup("#action$update$home_heating_order"));
		_updateHomeHeatingOrderControl.
			setMouseImages("@resource/images/Done_btn.png", "@resource/images/Done_overbtn.png", "@resource/images/Done_clickbtn.png");
		_homeHeatingOrderupdateAction = new ActionControl();
		_homeHeatingOrderupdateAction.setControl(_updateHomeHeatingOrderControl);
		UpdateCapability homeHeatingOrderUpdateCapability = new UpdateCapability();
		Set<IEntity> homeHeatingOrderUpdateEntities = new HashSet<IEntity>();
		homeHeatingOrderUpdateCapability.setEntities(homeHeatingOrderUpdateEntities);
		_homeHeatingOrderupdateAction.addCapability(homeHeatingOrderUpdateCapability);
		_homeHeatingOrderupdateAction.setClient(_client);
		_homeHeatingOrderupdateAction.setPreSend((request) -> {
			HomeHeatingOrder selectedEntity = (HomeHeatingOrder) homeHeatingOrderSingleDecorator.getSelectedEntity();
			selectedEntity.setOrderStatus(Done);
			homeHeatingOrderUpdateEntities.add(selectedEntity);
			return true;
		});
		_homeHeatingOrderupdateAction.setCallback((response) -> {
			if (response.isPassed()) {
				UiHandler.showAlert(AlertType.INFORMATION, "Order Update", "", "Order Was Updated");
				HomeHeatingOrder selectedEntity = (HomeHeatingOrder) homeHeatingOrderSingleDecorator.getSelectedEntity();
				_homeHeatingOrderTable.getObservableList().remove(selectedEntity);
			}
			else {
				UiHandler.showAlert(AlertType.ERROR, "Order Update", "", response.getDescription());
			}
		});
	}

	@Override
	protected void onLoad() throws IOException {
		IFilter filterRequest = _client.getFilterRequest();
		_homeHeatingOrder.setOrderStatus(InProcess);
		filterRequest.addQueryContainer(_homeHeatingOrder, "order_status", "=");
		ResponseEvent responseEvent = _client.sendRequest(filterRequest);
		responseEvent.continueWith((response) -> {
			if (response.isPassed()) {
				Collection<IEntity> entities = response.getEntities();
				List<HomeHeatingOrder> list = new ArrayList<HomeHeatingOrder>();
				for (IEntity entity : entities) {
					list.add((HomeHeatingOrder) entity);
				}
				_homeHeatingOrderTable.setRows(list);
			}
			else {
				UiHandler.showAlert(AlertType.ERROR, "Orders Collection", "", response.getDescription());
			}
		});
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
	}



}
