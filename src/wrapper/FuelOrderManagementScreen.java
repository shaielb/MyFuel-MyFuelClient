package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import action.RemoveCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfHyperlink;
import controls.MfImageView;
import db.entity.StationSupplyOrder;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Hyperlink;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class FuelOrderManagementScreen extends SceneBase {

	private StationSupplyOrder _stationSupplyOrder;

	private MfImageView _mainMenuStationManagerScreenControl;
	private Table<StationSupplyOrder> _stationSupplyOrderTableWrapper;
	private MfTable<StationSupplyOrder> _stationSupplyOrderTable;
	private MfImageView _supplyOrderConfirmationPopScreenControl;
	private MfHyperlink _filterStationSupplyOrderControl;
	private ActionControl _stationSupplyOrderfilterAction;
	private MfHyperlink _removeStationSupplyOrderControl;
	private ActionControl _stationSupplyOrderremoveAction;

	public FuelOrderManagementScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("FuelOrderManagementScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuStationManagerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuStationManagerScreen"));
		_mainMenuStationManagerScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuStationManagerScreen"); });

		_supplyOrderConfirmationPopScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$SupplyOrderConfirmationPopScreen"));
		_supplyOrderConfirmationPopScreenControl.addEvent((event) -> { _switcher.switchScene("SupplyOrderConfirmationPopScreen"); });

		//entities instantiation
		if (_stationSupplyOrder == null) {
			_stationSupplyOrder = new StationSupplyOrder();
		}

		//tables instantiation
		BorderPane stationSupplyOrderBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$station_supply_order");
		_stationSupplyOrderTableWrapper = new Table<StationSupplyOrder>();
		_stationSupplyOrderTable = new MfTable<StationSupplyOrder>(StationSupplyOrder.class);
		_stationSupplyOrderTable.setEditable(false);
		MfSingleDecorator<StationSupplyOrder> stationSupplyOrderSingleDecorator = new MfSingleDecorator<StationSupplyOrder>();
		_stationSupplyOrderTableWrapper.addDecorator(stationSupplyOrderSingleDecorator);
		_stationSupplyOrderTableWrapper.setTable(_stationSupplyOrderTable);
		stationSupplyOrderBp.setCenter(_stationSupplyOrderTable);

		//initializations
		_filterStationSupplyOrderControl = new MfHyperlink((Hyperlink) _scene.lookup("#action$collect$station_supply_order"));
		_stationSupplyOrderfilterAction = new ActionControl();
		_stationSupplyOrderfilterAction.setControl(_filterStationSupplyOrderControl);
		FilterCapability stationSupplyOrderFilterCapability = new FilterCapability();
		stationSupplyOrderFilterCapability.setQueryContainers(prepareQuery(_stationSupplyOrder));
		_stationSupplyOrderfilterAction.addCapability(stationSupplyOrderFilterCapability);
		_stationSupplyOrderfilterAction.setClient(_client);
		_stationSupplyOrderfilterAction.setPreSend((request) -> {

			return true;
		});
		_stationSupplyOrderfilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				StationSupplyOrder entity = (StationSupplyOrder) ientity;
			}
		});

		_removeStationSupplyOrderControl = new MfHyperlink((Hyperlink) _scene.lookup("#action$remove$station_supply_order"));
		_stationSupplyOrderremoveAction = new ActionControl();
		_stationSupplyOrderremoveAction.setControl(_removeStationSupplyOrderControl);
		RemoveCapability stationSupplyOrderRemoveCapability = new RemoveCapability();
		stationSupplyOrderRemoveCapability.addEntity(_stationSupplyOrder);
		_stationSupplyOrderremoveAction.addCapability(stationSupplyOrderRemoveCapability);
		_stationSupplyOrderremoveAction.setClient(_client);
		_stationSupplyOrderremoveAction.setPreSend((request) -> {

			return true;
		});
		_stationSupplyOrderremoveAction.setCallback((response) -> {
			
		});


	}

	@Override
	protected void onLoad() {
		
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
	}

	private List<QueryContainer> prepareQuery(StationSupplyOrder stationSupplyOrder) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		QueryContainer container = new QueryContainer();
		container.setQueryEntity(stationSupplyOrder);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}


}
