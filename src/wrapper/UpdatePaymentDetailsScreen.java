package wrapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfCheckBox;
import controls.MfImageView;
import controls.MfNumberField;
import controls.MfTextField;
import db.entity.Customer;
import db.entity.Payment;
import db.interfaces.IEntity;
import handler.UiHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import messages.request.IUpdate;
import messages.response.ResponseEvent;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;
import utilities.StringUtil;

@AutoGenerated
public class UpdatePaymentDetailsScreen extends SceneBase {

	private Customer _customer;
	private Payment _payment;

	private MfTextField _creditCardNumberControl;
	private MfImageView _updateAddCarScreenControl;
	private MfNumberField _expirationDateMonthControl;
	private MfNumberField _expirationDateYearControl;
	private MfNumberField _cvvControl;
	private MfCheckBox _cashControl;
	private MfImageView _mainMenuMarketingScreenControl;
	private MfImageView _updatePersonalDetailsScreenControl;

	public UpdatePaymentDetailsScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("UpdatePaymentDetailsScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_updateAddCarScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$UpdateAddCarScreen"));
		_updateAddCarScreenControl.addEvent((event) -> { 

			List<String> errorsList = validate();
			if (errorsList == null || errorsList.size() == 0) {
				updatePayment();
			}
			else {
				UiHandler.showAlert(AlertType.ERROR, "Errors", "", String.join("\n", errorsList));
			}
		});

		_mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		_mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		_updatePersonalDetailsScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$UpdatePersonalDetailsScreen"));
		_updatePersonalDetailsScreenControl.addEvent((event) -> { _switcher.switchScene("UpdatePersonalDetailsScreen"); });

		//entities instantiation
		if (_customer == null) {
			_customer = new Customer();
		}
		if (_payment == null) {
			_payment = new Payment();
		}

		//entities assignments
		_customer.setPayment(_payment);

		//controls instantiation
		_creditCardNumberControl = new MfTextField((TextField) _scene.lookup("#table$customer$payment$credit_card_number"));
		_expirationDateMonthControl = new MfNumberField((TextField) _scene.lookup("#table$customer$payment$expiration_date_month"), Integer.class);
		_expirationDateYearControl = new MfNumberField((TextField) _scene.lookup("#table$customer$payment$expiration_date_year"), Integer.class);
		_cvvControl = new MfNumberField((TextField) _scene.lookup("#table$customer$payment$cvv"), Integer.class);
		_cashControl = new MfCheckBox((CheckBox) _scene.lookup("#table$customer$payment$cash"));

		//fields initializations
		_creditCardNumberControl.setField(_payment.getClass().getDeclaredField("_credit_card_number"));
		_creditCardNumberControl.setEntity(_payment);

		_expirationDateMonthControl.setField(_payment.getClass().getDeclaredField("_expiration_date_month"));
		_expirationDateMonthControl.setEntity(_payment);

		_expirationDateYearControl.setField(_payment.getClass().getDeclaredField("_expiration_date_year"));
		_expirationDateYearControl.setEntity(_payment);

		_cvvControl.setField(_payment.getClass().getDeclaredField("_cvv"));
		_cvvControl.setEntity(_payment);

		_cashControl.setField(_payment.getClass().getDeclaredField("_cash"));
		_cashControl.setEntity(_payment);


	}

	@Override
	protected void onLoad() {

	}

	private void updatePayment() {
		IUpdate updateRequest = _client.getUpdateRequest();
		Set<IEntity> set = new HashSet<IEntity>();
		set.add(_payment);
		updateRequest.setEntities(set);

		try {
			ResponseEvent responseEvent = _client.sendRequest(updateRequest);
			responseEvent.continueWith((response) -> {
				if (response.isPassed()) {
					_switcher.switchScene("UpdateAddCarScreen", _customer); 
				}
				else {
					UiHandler.showAlert(AlertType.ERROR, "Payment Update", "", response.getDescription());
				}
			});
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private List<String> validate() {
		List<String> errorsList = new ArrayList<String>();
		if (StringUtil.isEmpty(_payment.getCreditCardNumber()) || _payment.getCreditCardNumber().toString().length() > 16) {
			errorsList.add("- Credit Card Number Should Be Populated And Contain a Maximul Value Of 16 Characters");
		}
		if (_payment.getCvv() == null || _payment.getCvv().toString().length() != 3) {
			errorsList.add("- Cvv Should Be Populated And Have Contain Exactly 3 Characters");
		}
		if (_payment.getExpirationDateMonth() == null || _payment.getExpirationDateMonth().toString().length() > 2) {
			errorsList.add("- Expiration Date Month Should Be Populated And Contain a Maximul Value Of 2 Characters");
		}
		if (_payment.getExpirationDateYear() == null || _payment.getExpirationDateYear().toString().length() != 4) {
			errorsList.add("- Expiration Date Month Should Be Populated And Contain Exactly 4 Characters");
		}
		return errorsList;
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
		for (IEntity entity : entities) {
			if (entity instanceof Customer) {
				_customer = (Customer) entity;
			}
			else if (entity instanceof Payment) {
				_payment = (Payment) entity;
			}
		}
	}


	public Customer getCustomer() {
		return _customer;
	}

	public void setCustomer(Customer customer) {
		_customer = customer;
	}

	public Payment getPayment() {
		return _payment;
	}

	public void setPayment(Payment payment) {
		_payment = payment;
	}
}
