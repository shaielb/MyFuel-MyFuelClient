package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import db.entity.AnalyticalRatings;
import db.entity.CustomersRatings;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class CustomerRatingScreen extends SceneBase {

	private CustomersRatings _customersRatings;
	private AnalyticalRatings _analyticalRatings;

	private MfImageView _mainMenuMarketingScreenControl;
	private Table<CustomersRatings> _customersRatingsTableWrapper;
	private MfTable<CustomersRatings> _customersRatingsTable;
	private MfImageView _filterAnalyticalRatingsControl;
	private ActionControl _analyticalRatingsfilterAction;

	public CustomerRatingScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("CustomerRatingScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		_mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		//entities instantiation
		_customersRatings = new CustomersRatings();
		_analyticalRatings = new AnalyticalRatings();

		//tables instantiation
		BorderPane customersRatingsBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$customers_ratings");
		_customersRatingsTableWrapper = new Table<CustomersRatings>();
		_customersRatingsTable = new MfTable<CustomersRatings>(CustomersRatings.class);
		_customersRatingsTable.setEditable(false);
		MfSingleDecorator<CustomersRatings> customersRatingsSingleDecorator = new MfSingleDecorator<CustomersRatings>();
		_customersRatingsTableWrapper.addDecorator(customersRatingsSingleDecorator);
		_customersRatingsTableWrapper.setTable(_customersRatingsTable);
		customersRatingsBp.setCenter(_customersRatingsTable);

		//initializations
		_filterAnalyticalRatingsControl = new MfImageView((ImageView) _scene.lookup("#action$collect$analytical_ratings"));
		_analyticalRatingsfilterAction = new ActionControl();
		_analyticalRatingsfilterAction.setControl(_filterAnalyticalRatingsControl);
		FilterCapability analyticalRatingsFilterCapability = new FilterCapability();
		analyticalRatingsFilterCapability.setQueryContainers(prepareQuery(_analyticalRatings));
		_analyticalRatingsfilterAction.addCapability(analyticalRatingsFilterCapability);
		_analyticalRatingsfilterAction.setClient(_client);
		_analyticalRatingsfilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				AnalyticalRatings entity = (AnalyticalRatings) ientity;
			}
		});


	}

	private List<QueryContainer> prepareQuery(AnalyticalRatings analyticalRatings) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		QueryContainer container = new QueryContainer();
		container.setQueryEntity(analyticalRatings);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}


}
