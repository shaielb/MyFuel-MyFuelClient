package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FastFuelingCapability;
import adapter.base.ControlAdapter;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import controls.MfNumberField;
import controls.MfText;
import controls.MfTextField;
import db.entity.FastfuelingPricingModelView;
import db.entity.FuelingPurchase;
import db.entity.SpecialSalesEnum;
import db.entity.Station;
import db.interfaces.IEntity;
import handler.UiHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import messages.QueryContainer;
import messages.Request;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;

@AutoGenerated
public class FastFuelingScreen extends SceneBase {

	private FastfuelingPricingModelView _fastfuelingPricingModelView;
	private FuelingPurchase _fuelingPurchase;
	private SpecialSalesEnum _specialSalesEnum;
	private Station _station;

	private MfText _firstNameControl;
	private MfText _maxPriceControl;
	private MfText _totalPriceControl;
	private MfText _fuelTypeControl;
	private MfText _saveControl;
	private MfTextField _plateNumberControl;
	private MfNumberField _amountControl;
	private MfText _titleKeyControl;
	private MfTextField _stationNameControl;
	private MfImageView _filterFastfuelingPricingModelViewControl;
	private ActionControl _fastfuelingPricingModelViewfilterAction;

	public FastFuelingScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("FastFuelingScreen.fxml"));
		_scene = new Scene(root);

		//entities instantiation
		if (_fastfuelingPricingModelView == null) {
			_fastfuelingPricingModelView = new FastfuelingPricingModelView();
		}
		if (_fuelingPurchase == null) {
			_fuelingPurchase = new FuelingPurchase();
		}
		if (_specialSalesEnum == null) {
			_specialSalesEnum = new SpecialSalesEnum();
		}
		if (_station == null) {
			_station = new Station();
		}

		//entities assignments
		_fuelingPurchase.setStation(_station);

		//controls instantiation
		_firstNameControl = new MfText((Text) _scene.lookup("#table$fastfueling_pricing_model_view$first_name"));
		_maxPriceControl = new MfText((Text) _scene.lookup("#table$fastfueling_pricing_model_view$max_price"));
		_totalPriceControl = new MfText((Text) _scene.lookup("#table$fueling_purchase$total_price"));
		_fuelTypeControl = new MfText((Text) _scene.lookup("#table$fastfueling_pricing_model_view$fuel_type"));
		_saveControl = new MfText((Text) _scene.lookup("#table$fueling_purchase$save"));
		_plateNumberControl = new MfTextField((TextField) _scene.lookup("#table$fastfueling_pricing_model_view$plate_number"));
		_amountControl = new MfNumberField((TextField) _scene.lookup("#table$fueling_purchase$amount"), Double.class);
		_titleKeyControl = new MfText((Text) _scene.lookup("#table$special_sales_enum$title_key"));
		_stationNameControl = new MfTextField((TextField) _scene.lookup("#table$fueling_purchase$station$station_name"));

		//initializations
		_filterFastfuelingPricingModelViewControl = new MfImageView((ImageView) _scene.lookup("#action$collect$fastfueling_pricing_model_view"));
		_filterFastfuelingPricingModelViewControl.
		setMouseImages("@resource/images/Fuel_btn.png", "@resource/images/Fuel_overbtn.png", "@resource/images/Fuel_clickbtn.png");
		_fastfuelingPricingModelViewfilterAction = new ActionControl();
		_fastfuelingPricingModelViewfilterAction.setControl(_filterFastfuelingPricingModelViewControl);
		FastFuelingCapability fastfuelingPricingModelViewFilterCapability = new FastFuelingCapability();
		fastfuelingPricingModelViewFilterCapability.setQueryContainers(prepareQuery(_fastfuelingPricingModelView));
		_fastfuelingPricingModelViewfilterAction.addCapability(fastfuelingPricingModelViewFilterCapability);
		_fastfuelingPricingModelViewfilterAction.setClient(_client);
		_fastfuelingPricingModelViewfilterAction.setPreSend((request) -> {
			Request req = ((Request) request);
			QueryContainer fuelingPurchaseContainer = new QueryContainer();
			fuelingPurchaseContainer.setQueryEntity(_fuelingPurchase);
			req.addQueryContainer(fuelingPurchaseContainer);
			return true;
		});
		_fastfuelingPricingModelViewfilterAction.setCallback((response) -> {
			if (!response.isPassed()) {
				UiHandler.showAlert(AlertType.ERROR, "Fast Fueling", "", response.getDescription());
			}
			else {
				Collection<IEntity> entities = response.getEntities();
				for (IEntity ientity : entities) {
					if (ientity instanceof FastfuelingPricingModelView) {
						UiHandler.clone(ientity, _fastfuelingPricingModelView);
					}
					else if (ientity instanceof FuelingPurchase) {
						UiHandler.clone(ientity, _fuelingPurchase);
					}
				}
				try {
					_firstNameControl.update();
					_maxPriceControl.update();
					_totalPriceControl.update();
					_fuelTypeControl.update();
					_saveControl.setValue((_fastfuelingPricingModelView.getMaxPrice() * _fuelingPurchase.getAmount()) - 
							_fuelingPurchase.getTotalPrice());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});

		//fields initializations
		_firstNameControl.setField(_fastfuelingPricingModelView.getClass().getDeclaredField("_first_name"));
		_firstNameControl.setEntity(_fastfuelingPricingModelView);

		_maxPriceControl.setField(_fastfuelingPricingModelView.getClass().getDeclaredField("_max_price"));
		_maxPriceControl.setEntity(_fastfuelingPricingModelView);

		_totalPriceControl.setField(_fuelingPurchase.getClass().getDeclaredField("_total_price"));
		_totalPriceControl.setEntity(_fuelingPurchase);

		_fuelTypeControl.setField(_fastfuelingPricingModelView.getClass().getDeclaredField("_fuel_type"));
		_fuelTypeControl.setEntity(_fastfuelingPricingModelView);

		_plateNumberControl.setField(_fastfuelingPricingModelView.getClass().getDeclaredField("_plate_number"));
		_plateNumberControl.setEntity(_fastfuelingPricingModelView);

		_amountControl.setField(_fuelingPurchase.getClass().getDeclaredField("_amount"));
		_amountControl.setEntity(_fuelingPurchase);

		_titleKeyControl.setField(_specialSalesEnum.getClass().getDeclaredField("_title_key"));
		_titleKeyControl.setEntity(_specialSalesEnum);

		_stationNameControl.setField(_station.getClass().getDeclaredField("_station_name"));
		_stationNameControl.setEntity(_station);

		_titleKeyControl.setField(_specialSalesEnum.getClass().getDeclaredField("_title_key"));
		_titleKeyControl.setEntity(_specialSalesEnum);

		//grouping
		groupControls(new ControlAdapter[] { _titleKeyControl, _titleKeyControl });

	}

	@Override
	protected void onLoad() {

	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
	}

	private List<QueryContainer> prepareQuery(FastfuelingPricingModelView fastfuelingPricingModelView) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();

		Map<String, String> queryMap = new HashMap<String, String>();

		QueryContainer container = new QueryContainer();
		container.setQueryEntity(fastfuelingPricingModelView);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}

	public FastfuelingPricingModelView getFastfuelingPricingModelView() {
		return _fastfuelingPricingModelView;
	}

	public void setFastfuelingPricingModelView(FastfuelingPricingModelView fastfuelingPricingModelView) {
		_fastfuelingPricingModelView = fastfuelingPricingModelView;
	}

	public FuelingPurchase getFuelingPurchase() {
		return _fuelingPurchase;
	}

	public void setFuelingPurchase(FuelingPurchase fuelingPurchase) {
		_fuelingPurchase = fuelingPurchase;
	}

	public SpecialSalesEnum getSpecialSalesEnum() {
		return _specialSalesEnum;
	}

	public void setSpecialSalesEnum(SpecialSalesEnum specialSalesEnum) {
		_specialSalesEnum = specialSalesEnum;
	}

	public Station getStation() {
		return _station;
	}

	public void setStation(Station station) {
		_station = station;
	}
}
