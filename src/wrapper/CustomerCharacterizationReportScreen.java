package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import adapter.base.ControlAdapter;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfDatePicker;
import controls.MfImageView;
import db.entity.Car;
import db.entity.Customer;
import db.entity.FuelingPurchase;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class CustomerCharacterizationReportScreen extends SceneBase {

	private Customer _customer;
	private Car _car;
	private FuelingPurchase _fuelingPurchase;

	private MfImageView _mainMenuMarketingScreenControl;
	private MfImageView _customersManagementScreenControl;
	private MfDatePicker _dateTimeControl;
	private Table<FuelingPurchase> _fuelingPurchaseTableWrapper;
	private MfTable<FuelingPurchase> _fuelingPurchaseTable;
	private MfImageView _filterFuelingPurchaseControl;
	private ActionControl _fuelingPurchasefilterAction;

	public CustomerCharacterizationReportScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("CustomerCharacterizationReportScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		_mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		_customersManagementScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$CustomersManagementScreen"));
		_customersManagementScreenControl.addEvent((event) -> { _switcher.switchScene("CustomersManagementScreen"); });

		//entities instantiation
		if (_customer == null) {
			_customer = new Customer();
		}
		if (_car == null) {
			_car = new Car();
		}
		if (_fuelingPurchase == null) {
			_fuelingPurchase = new FuelingPurchase();
		}

		//entities assignments
		_car.setCustomer(_customer);
		_fuelingPurchase.setCar(_car);
		_fuelingPurchase.setCustomer(_customer);

		//controls instantiation
		_dateTimeControl = new MfDatePicker((DatePicker) _scene.lookup("#table$customer$car$fueling_purchase$date_time"));

		//tables instantiation
		BorderPane fuelingPurchaseBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$fueling_purchase");
		_fuelingPurchaseTableWrapper = new Table<FuelingPurchase>();
		_fuelingPurchaseTable = new MfTable<FuelingPurchase>(FuelingPurchase.class);
		_fuelingPurchaseTable.setEditable(false);
		MfSingleDecorator<FuelingPurchase> fuelingPurchaseSingleDecorator = new MfSingleDecorator<FuelingPurchase>();
		_fuelingPurchaseTableWrapper.addDecorator(fuelingPurchaseSingleDecorator);
		_fuelingPurchaseTableWrapper.setTable(_fuelingPurchaseTable);
		fuelingPurchaseBp.setCenter(_fuelingPurchaseTable);

		//initializations
		_filterFuelingPurchaseControl = new MfImageView((ImageView) _scene.lookup("#action$collect$fueling_purchase"));
		_filterFuelingPurchaseControl.
			setMouseImages("@resource/images/MakeAReport_btn.png", "@resource/images/MakeAReport_overbtn.png", "@resource/images/MakeAReport_clickbtn.png");
		_fuelingPurchasefilterAction = new ActionControl();
		_fuelingPurchasefilterAction.setControl(_filterFuelingPurchaseControl);
		FilterCapability fuelingPurchaseFilterCapability = new FilterCapability();
		fuelingPurchaseFilterCapability.setQueryContainers(prepareQuery(_fuelingPurchase));
		_fuelingPurchasefilterAction.addCapability(fuelingPurchaseFilterCapability);
		_fuelingPurchasefilterAction.setClient(_client);
		_fuelingPurchasefilterAction.setPreSend((request) -> {

			return true;
		});
		_fuelingPurchasefilterAction.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				FuelingPurchase entity = (FuelingPurchase) ientity;
			}
		});

		//fields initializations
		_dateTimeControl.setField(_fuelingPurchase.getClass().getDeclaredField("_date_time"));
		_dateTimeControl.setEntity(_fuelingPurchase);

		_dateTimeControl.setField(_fuelingPurchase.getClass().getDeclaredField("_date_time"));
		_dateTimeControl.setEntity(_fuelingPurchase);

		//grouping
		groupControls(new ControlAdapter[] { _dateTimeControl, _dateTimeControl });

	}

	@Override
	protected void onLoad() {
		
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
	}

	private List<QueryContainer> prepareQuery(FuelingPurchase fuelingPurchase) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		QueryContainer container = new QueryContainer();
		container.setQueryEntity(fuelingPurchase);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}

	public Customer getCustomer() {
		 return _customer;
	}

	public void setCustomer(Customer customer) {
		 _customer = customer;
	}

	public Car getCar() {
		 return _car;
	}

	public void setCar(Car car) {
		 _car = car;
	}

	public FuelingPurchase getFuelingPurchase() {
		 return _fuelingPurchase;
	}

	public void setFuelingPurchase(FuelingPurchase fuelingPurchase) {
		 _fuelingPurchase = fuelingPurchase;
	}
}
