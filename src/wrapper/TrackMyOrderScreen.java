package wrapper;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import action.ActionControl;
import action.FilterCapability;
import action.RemoveCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfHyperlink;
import controls.MfImageView;
import controls.MfText;
import controls.MfTextField;
import db.entity.HomeHeatingOrder;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Text;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class TrackMyOrderScreen extends SceneBase {

	private HomeHeatingOrder _homeHeatingOrder;

	private MfImageView _mainMenuCustomerScreenControl;
	private MfTextField _orderIdControl;
	private MfImageView _filterHomeHeatingOrderControlIv;
	private ActionControl _homeHeatingOrderfilterActionIv;
	private MfHyperlink _filterHomeHeatingOrderControlHl;
	private ActionControl _homeHeatingOrderfilterActionHl;
	private MfHyperlink _removeHomeHeatingOrderControl;
	private ActionControl _homeHeatingOrderremoveAction;
	private Table<HomeHeatingOrder> _homeHeatingOrderTableWrapper;
	private MfTable<HomeHeatingOrder> _homeHeatingOrderTable;
	private MfText _orderStatusControl;

	public TrackMyOrderScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("TrackMyOrderScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuCustomerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuCustomerScreen"));
		_mainMenuCustomerScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuCustomerScreen"); });

		//entities instantiation
		_homeHeatingOrder = new HomeHeatingOrder();

		//controls instantiation
		_orderIdControl = new MfTextField((TextField) _scene.lookup("#table$home_heating_order$order_id"));
		_orderStatusControl = new MfText((Text) _scene.lookup("#table$home_heating_order$order_status"));

		//tables instantiation
		BorderPane homeHeatingOrderBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$home_heating_order");
		_homeHeatingOrderTableWrapper = new Table<HomeHeatingOrder>();
		_homeHeatingOrderTable = new MfTable<HomeHeatingOrder>(HomeHeatingOrder.class);
		_homeHeatingOrderTable.setEditable(false);
		MfSingleDecorator<HomeHeatingOrder> homeHeatingOrderSingleDecorator = new MfSingleDecorator<HomeHeatingOrder>();
		_homeHeatingOrderTableWrapper.addDecorator(homeHeatingOrderSingleDecorator);
		_homeHeatingOrderTableWrapper.setTable(_homeHeatingOrderTable);
		homeHeatingOrderBp.setCenter(_homeHeatingOrderTable);

		//initializations
		_filterHomeHeatingOrderControlIv = new MfImageView((ImageView) _scene.lookup("#action$collect$home_heating_order$$$iv"));
		_homeHeatingOrderfilterActionIv = new ActionControl();
		_homeHeatingOrderfilterActionIv.setControl(_filterHomeHeatingOrderControlIv);
		FilterCapability homeHeatingOrderFilterCapabilityIv = new FilterCapability();
		homeHeatingOrderFilterCapabilityIv.setQueryContainers(prepareQuery(_homeHeatingOrder));
		_homeHeatingOrderfilterActionIv.addCapability(homeHeatingOrderFilterCapabilityIv);
		_homeHeatingOrderfilterActionIv.setClient(_client);
		_homeHeatingOrderfilterActionIv.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				HomeHeatingOrder entity = (HomeHeatingOrder) ientity;
			}
		});

		_filterHomeHeatingOrderControlHl = new MfHyperlink((Hyperlink) _scene.lookup("#action$collect$home_heating_order$$$hl"));
		_homeHeatingOrderfilterActionHl = new ActionControl();
		_homeHeatingOrderfilterActionHl.setControl(_filterHomeHeatingOrderControlHl);
		FilterCapability homeHeatingOrderFilterCapabilityHl = new FilterCapability();
		homeHeatingOrderFilterCapabilityHl.setQueryContainers(prepareQuery(_homeHeatingOrder));
		_homeHeatingOrderfilterActionHl.addCapability(homeHeatingOrderFilterCapabilityHl);
		_homeHeatingOrderfilterActionHl.setClient(_client);
		_homeHeatingOrderfilterActionHl.setCallback((response) -> {
			Collection<IEntity> entities = response.getEntities();
			for (IEntity ientity : entities) {
				HomeHeatingOrder entity = (HomeHeatingOrder) ientity;
			}
		});

		_removeHomeHeatingOrderControl = new MfHyperlink((Hyperlink) _scene.lookup("#action$remove$home_heating_order"));
		_homeHeatingOrderremoveAction = new ActionControl();
		_homeHeatingOrderremoveAction.setControl(_removeHomeHeatingOrderControl);
		RemoveCapability homeHeatingOrderRemoveCapability = new RemoveCapability();
		homeHeatingOrderRemoveCapability.addEntity(_homeHeatingOrder);
		_homeHeatingOrderremoveAction.addCapability(homeHeatingOrderRemoveCapability);
		_homeHeatingOrderremoveAction.setClient(_client);
		_homeHeatingOrderremoveAction.setCallback((response) -> {
			
		});

		//fields initializations
		_orderIdControl.setField(_homeHeatingOrder.getClass().getDeclaredField("_order_id"));
		_orderIdControl.setEntity(_homeHeatingOrder);

		_orderStatusControl.setField(_homeHeatingOrder.getClass().getDeclaredField("_order_status"));
		_orderStatusControl.setEntity(_homeHeatingOrder);


	}

	private List<QueryContainer> prepareQuery(HomeHeatingOrder homeHeatingOrder) {
		List<QueryContainer> containers = new ArrayList<QueryContainer>();
		
		Map<String, String> queryMap = new HashMap<String, String>();
		
		QueryContainer container = new QueryContainer();
		container.setQueryEntity(homeHeatingOrder);
		container.setQueryMap(queryMap);
		containers.add(container);
		return containers;
	}

	public HomeHeatingOrder getHomeHeatingOrder() {
		 return _homeHeatingOrder;
	}

	public void setHomeHeatingOrder(HomeHeatingOrder homeHeatingOrder) {
		 _homeHeatingOrder = homeHeatingOrder;
	}
}
