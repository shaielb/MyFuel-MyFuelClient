package wrapper;

import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import db.entity.StationSupplyOrder;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import sceneswitch.Context;
import sceneswitch.SceneBase;
import table.MfTable;
import widgets.table.MfSingleDecorator;
import widgets.table.Table;

@AutoGenerated
public class OrdersStationManagerScreen extends SceneBase {

	private StationSupplyOrder _stationSupplyOrder;

	private MfImageView _mainMenuStationManagerScreenControl;
	private Table<StationSupplyOrder> _stationSupplyOrderTableWrapper;
	private MfTable<StationSupplyOrder> _stationSupplyOrderTable;
	private MfImageView _supplyOrderConfirmPopScreenControl;

	public OrdersStationManagerScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
		initialize();
	}

	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("OrdersStationManagerScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuStationManagerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuStationManagerScreen"));
		_mainMenuStationManagerScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuStationManagerScreen"); });

		_supplyOrderConfirmPopScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$SupplyOrderConfirmPopScreen"));
		_supplyOrderConfirmPopScreenControl.addEvent((event) -> { _switcher.switchScene("SupplyOrderConfirmPopScreen"); });

		//entities instantiation
		_stationSupplyOrder = new StationSupplyOrder();

		//tables instantiation
		BorderPane stationSupplyOrderBp = (BorderPane) _scene.lookup("#uitable$noneditable$single$station_supply_order");
		_stationSupplyOrderTableWrapper = new Table<StationSupplyOrder>();
		_stationSupplyOrderTable = new MfTable<StationSupplyOrder>(StationSupplyOrder.class);
		_stationSupplyOrderTable.setEditable(false);
		MfSingleDecorator<StationSupplyOrder> stationSupplyOrderSingleDecorator = new MfSingleDecorator<StationSupplyOrder>();
		_stationSupplyOrderTableWrapper.addDecorator(stationSupplyOrderSingleDecorator);
		_stationSupplyOrderTableWrapper.setTable(_stationSupplyOrderTable);
		stationSupplyOrderBp.setCenter(_stationSupplyOrderTable);


	}



}
