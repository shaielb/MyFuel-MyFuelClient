package wrapper;

import java.io.IOException;

import action.ActionControl;
import action.InsertCapability;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfImageView;
import controls.MfText;
import db.entity.FuelingPurchase;
import db.entity.StationManagerReports;
import db.interfaces.IEntity;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import messages.QueryContainer;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;

@AutoGenerated
public class IncomeReportScreen extends StationReportsBase {

	private static String  ReportType = "Income Report";

	private FuelingPurchase _fuelingPurchase;

	private MfImageView _mainMenuStationManagerScreenControl;

	private MfText _stationNameControl;
	private MfText _totalPriceControl;

	private MfImageView _insertStationManagerReportsControl;
	private ActionControl _stationManagerReportsinsertAction;

	public IncomeReportScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("IncomeReportScreen.fxml"));
		_scene = new Scene(root);
		super.initialize();

		//scene switchers
		_mainMenuStationManagerScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuStationManagerScreen"));
		_mainMenuStationManagerScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuStationManagerScreen"); });

		//entities instantiation
		if (_fuelingPurchase == null) {
			_fuelingPurchase = new FuelingPurchase();
		}

		//entities assignments
		_fuelingPurchase.setStation(_station);
		_fuelingPurchase.setFuelEnum(_fuelEnum);
		_stationManagerReports.setReportType(ReportType);
		_stationManagerReportsBenzin.setReportType(ReportType);
		_stationManagerReportsSoler.setReportType(ReportType);
		_stationManagerReportsMotorcycles.setReportType(ReportType);

		//controls instantiation
		_stationNameControl = new MfText((Text) _scene.lookup("#table$station_manager_reports$station$station_name"));

		_totalPriceControl = new MfText((Text) _scene.lookup("#table$station_manager_reports$total_price"));

		//initializations
		_insertStationManagerReportsControl = new MfImageView((ImageView) _scene.lookup("#action$insert$station_manager_reports"));
		_insertStationManagerReportsControl.
		setMouseImages("@resource/images/ProduceReport_btn.png", "@resource/images/ProduceReport_overbtn.png", "@resource/images/ProduceReport_clickbtn.png");
		_stationManagerReportsinsertAction = new ActionControl();
		_stationManagerReportsinsertAction.setControl(_insertStationManagerReportsControl);
		InsertCapability stationManagerReportsInsertCapability = new InsertCapability();
		stationManagerReportsInsertCapability.addEntity(_stationManagerReports);
		_stationManagerReportsinsertAction.addCapability(stationManagerReportsInsertCapability);
		_stationManagerReportsinsertAction.setClient(_client);
		_stationManagerReportsinsertAction.setPreSend((request) -> {
			FuelingPurchase start = new FuelingPurchase();
			FuelingPurchase end = new FuelingPurchase();
			procudeReposrts(
					(dateTime) -> { 
						start.setDateTime(dateTime);
						return start; 
					}, 
					(dateTime) -> {
						end.setDateTime(dateTime);
						return end; 
					});
			return false;
		});
		_stationManagerReportsinsertAction.setCallback((response) -> {

		});

		//fields initializations
		_stationNameControl.setField(_station.getClass().getDeclaredField("_station_name"));
		_stationNameControl.setEntity(_station);
	}

	@Override
	protected void postCollectHook() {
		Double benzinPrice = _stationManagerReportsBenzin.getPrice();
		Double solerPrice = _stationManagerReportsSoler.getPrice();
		Double motorcyclesPrice = _stationManagerReportsMotorcycles.getPrice();

		Double totalPrice = benzinPrice + solerPrice + motorcyclesPrice;

		_stationManagerReportsBenzin.setTotalPrice(totalPrice);
		_stationManagerReportsSoler.setTotalPrice(totalPrice);
		_stationManagerReportsMotorcycles.setTotalPrice(totalPrice);

		((Text) _totalPriceControl.getInstance()).setText(totalPrice.toString());

		_stationManagerReportsBenzin.setReportQuarter(_stationManagerReports.getReportQuarter());
		_stationManagerReportsSoler.setReportQuarter(_stationManagerReports.getReportQuarter());
		_stationManagerReportsMotorcycles.setReportQuarter(_stationManagerReports.getReportQuarter());

		_stationManagerReportsBenzin.setReportYear(_stationManagerReports.getReportYear());
		_stationManagerReportsSoler.setReportYear(_stationManagerReports.getReportYear());
		_stationManagerReportsMotorcycles.setReportYear(_stationManagerReports.getReportYear());
		try {
			insertReports();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected void onLoad() throws IOException {
		StationManagerReports smr = new StationManagerReports();
		smr.setStation(_station);
		QueryContainer queryContainer = new QueryContainer();
		queryContainer.setQueryEntity(smr);
		queryContainer.addQueryCondition("station_fk", "=");
		super.collectReports(queryContainer);
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
		//_station = new Station();
		//_station.setId(1);
	}

	public FuelingPurchase getFuelingPurchase() {
		return _fuelingPurchase;
	}

	public void setFuelingPurchase(FuelingPurchase fuelingPurchase) {
		_fuelingPurchase = fuelingPurchase;
	}
}
