package wrapper;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import action.ActionControl;
import action.RemoveCapability;
import adapter.base.ControlAdapter;
import annotations.AutoGenerated;
import application.Main;
import client.IClient;
import controls.MfEmailField;
import controls.MfImageView;
import controls.MfNumberField;
import controls.MfPasswordField;
import controls.MfRadioButton;
import controls.MfText;
import controls.MfTextField;
import db.entity.Address;
import db.entity.Customer;
import db.entity.Payment;
import db.entity.Person;
import db.entity.SystemUser;
import db.interfaces.IEntity;
import handler.UiHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.PasswordField;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import messages.request.IUpdate;
import messages.response.ResponseEvent;
import sceneswitch.Context;
import sceneswitch.ISceneSwitcher;
import sceneswitch.SceneBase;
import utilities.StringUtil;

@AutoGenerated
public class UpdatePersonalDetailsScreen extends SceneBase {

	private Customer _customer;
	private Person _person;
	private Address _address;
	private SystemUser _systemUser;
	private Payment _payment;

	private MfTextField _firstNameControl;
	private MfImageView _mainMenuMarketingScreenControl;
	private MfTextField _lastNameControl;
	private MfNumberField _customerIdControl;
	private MfEmailField _emailControl;
	private MfTextField _phoneNumberControl;
	private MfTextField _houseControl;
	private MfRadioButton _customerTypeControlCompany_owner;
	private MfPasswordField _userPasswordControlTf;
	private PasswordField _userPasswordControlValidate;
	private MfRadioButton _customerTypeControlPrivate;
	private MfTextField _companyNameControl;
	private MfImageView _updatePaymentDetailsScreenControl;
	private MfNumberField _floorControl;
	private MfTextField _apartmentControl;
	private MfTextField _cityControl;
	private MfTextField _streetControl;
	private MfImageView _removeCustomerControl;
	private ActionControl _customerremoveAction;
	
	private MfText _lastNameControlError;
	private MfText _customerIdControlError;
	private MfText _emailControlError;
	private MfText _userPasswordControlError;
	private MfText _phoneNumberControlError;
	private MfText _cityControlError;
	private MfText _streetControlError;
	
	private String _entryPassword;

	public UpdatePersonalDetailsScreen(ISceneSwitcher sceneSwitcher, IClient client, Context context) throws Exception {
		super(sceneSwitcher, client, context);
	}

	@Override
	public void initialize() throws Exception {
		Parent root = FXMLLoader.load(Main.class.getResource("UpdatePersonalDetailsScreen.fxml"));
		_scene = new Scene(root);

		//scene switchers
		_mainMenuMarketingScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$MainMenuMarketingScreen"));
		_mainMenuMarketingScreenControl.addEvent((event) -> { _switcher.switchScene("MainMenuMarketingScreen"); });

		_updatePaymentDetailsScreenControl = new MfImageView((ImageView) _scene.lookup("#scene$UpdatePaymentDetailsScreen"));
		_updatePaymentDetailsScreenControl.addEvent((event) -> { 
			List<String> errorsList = validate();
			if (errorsList == null || errorsList.size() == 0) {
				try {
					updateCustomer();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			else {
				UiHandler.showAlert(AlertType.WARNING, "Errors", "", String.join("\n", errorsList));
			}
			});

		//entities instantiation
		if (_customer == null) {
			_customer = new Customer();
		}
		if (_person == null) {
			_person = new Person();
		}
		if (_address == null) {
			_address = new Address();
		}
		if (_systemUser == null) {
			_systemUser = new SystemUser();
		}

		//entities assignments
		_customer.setPerson(_person);
		_customer.setAddress(_address);
		_customer.setSystemUser(_systemUser);

		//controls instantiation
		_firstNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$first_name"));
		_lastNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$last_name"));
		_customerIdControl = new MfNumberField((TextField) _scene.lookup("#table$customer$customer_id"), Integer.class);
		_emailControl = new MfEmailField((TextField) _scene.lookup("#table$customer$person$email"));
		_phoneNumberControl = new MfTextField((TextField) _scene.lookup("#table$customer$person$phone_number"));
		_houseControl = new MfTextField((TextField) _scene.lookup("#table$customer$address$house"));
		_customerTypeControlCompany_owner = new MfRadioButton((RadioButton) _scene.lookup("#table$customer$customer_type$$company_owner"));
		_userPasswordControlTf = new MfPasswordField((PasswordField) _scene.lookup("#table$customer$system_user$user_password$$$tf"));
		_userPasswordControlValidate = (PasswordField) _scene.lookup("#table$customer$system_user$user_password$$$validate");
		_customerTypeControlPrivate = new MfRadioButton((RadioButton) _scene.lookup("#table$customer$customer_type$$private"));
		_companyNameControl = new MfTextField((TextField) _scene.lookup("#table$customer$company_name"));
		_floorControl = new MfNumberField((TextField) _scene.lookup("#table$customer$address$floor"), Integer.class);
		_apartmentControl = new MfTextField((TextField) _scene.lookup("#table$customer$address$apartment"));
		_cityControl = new MfTextField((TextField) _scene.lookup("#table$customer$address$city"));
		_streetControl = new MfTextField((TextField) _scene.lookup("#table$customer$address$street"));
		
		_lastNameControlError = new MfText((Text) _scene.lookup("#table$customer$person$last_name$$$error"));
		_customerIdControlError = new MfText((Text) _scene.lookup("#table$customer$customer_id$$$error"));
		_emailControlError = new MfText((Text) _scene.lookup("#table$customer$person$email$$$error"));
		_userPasswordControlError = new MfText((Text) _scene.lookup("#table$customer$system_user$user_password$$$error"));
		_phoneNumberControlError = new MfText((Text) _scene.lookup("#table$customer$person$phone_number$$$error"));
		_cityControlError = new MfText((Text) _scene.lookup("#table$customer$address$city$$$error"));
		_streetControlError = new MfText((Text) _scene.lookup("#table$customer$address$street$$$error"));

		//initializations
		_removeCustomerControl = new MfImageView((ImageView) _scene.lookup("#action$remove$customer"));
		_removeCustomerControl.
		setMouseImages("@resource/images/RemoveThisCustomer_btn.png", "@resource/images/RemoveThisCustomer_overbtn.png", "@resource/images/RemoveThisCustomer_clickbtn.png");
		_customerremoveAction = new ActionControl();
		_customerremoveAction.setControl(_removeCustomerControl);
		RemoveCapability customerRemoveCapability = new RemoveCapability();
		customerRemoveCapability.addEntity(_customer);
		_customerremoveAction.addCapability(customerRemoveCapability);
		_customerremoveAction.setClient(_client);
		_customerremoveAction.setPreSend((request) -> {

			return true;
		});
		_customerremoveAction.setCallback((response) -> {

		});

		//fields initializations
		_firstNameControl.setField(_person.getClass().getDeclaredField("_first_name"));
		_firstNameControl.setEntity(_person);

		_lastNameControl.setField(_person.getClass().getDeclaredField("_last_name"));
		_lastNameControl.setEntity(_person);

		_customerIdControl.setField(_customer.getClass().getDeclaredField("_customer_id"));
		_customerIdControl.setEntity(_customer);

		_emailControl.setField(_person.getClass().getDeclaredField("_email"));
		_emailControl.setEntity(_person);

		_phoneNumberControl.setField(_person.getClass().getDeclaredField("_phone_number"));
		_phoneNumberControl.setEntity(_person);

		_houseControl.setField(_address.getClass().getDeclaredField("_house"));
		_houseControl.setEntity(_address);

		_customerTypeControlCompany_owner.setField(_customer.getClass().getDeclaredField("_customer_type"));
		_customerTypeControlCompany_owner.setEntity(_customer);
		_customerTypeControlCompany_owner.setValidValue("company_owner");

		_userPasswordControlTf.setField(_systemUser.getClass().getDeclaredField("_user_password"));
		_userPasswordControlTf.setEntity(_systemUser);

		_userPasswordControlTf.setField(_systemUser.getClass().getDeclaredField("_user_password"));
		_userPasswordControlTf.setEntity(_systemUser);

		_customerTypeControlPrivate.setField(_customer.getClass().getDeclaredField("_customer_type"));
		_customerTypeControlPrivate.setEntity(_customer);
		_customerTypeControlPrivate.setValidValue("private");

		_companyNameControl.setField(_customer.getClass().getDeclaredField("_company_name"));
		_companyNameControl.setEntity(_customer);

		_floorControl.setField(_address.getClass().getDeclaredField("_floor"));
		_floorControl.setEntity(_address);

		_apartmentControl.setField(_address.getClass().getDeclaredField("_apartment"));
		_apartmentControl.setEntity(_address);

		_cityControl.setField(_address.getClass().getDeclaredField("_city"));
		_cityControl.setEntity(_address);

		_streetControl.setField(_address.getClass().getDeclaredField("_street"));
		_streetControl.setEntity(_address);
		
		_companyNameControl.getInstance().setDisable(true);

		_lastNameControlError.getInstance().setVisible(false);
		_customerIdControlError.getInstance().setVisible(false);
		_emailControlError.getInstance().setVisible(false);
		_userPasswordControlError.getInstance().setVisible(false);
		_phoneNumberControlError.getInstance().setVisible(false);
		_cityControlError.getInstance().setVisible(false);
		_streetControlError.getInstance().setVisible(false);
		
		_customerIdControl.setErrorLabel((Text) _customerIdControlError.getInstance()); 
		_emailControl.setErrorLabel((Text) _emailControlError.getInstance()); 
		
		groupControls(new ControlAdapter[] { _customerTypeControlCompany_owner, _customerTypeControlPrivate });
		
		_customerTypeControlCompany_owner.addEvent((event) -> {
			if (event instanceof Boolean && (Boolean) event) {
				_companyNameControl.getInstance().setDisable(false);
			}
		});
		_customerTypeControlPrivate.addEvent((event) -> {
			if (event instanceof Boolean && (Boolean) event) {
				try {
					_companyNameControl.setValue("");
				} catch (Exception e) {
					e.printStackTrace();
				}
				_companyNameControl.getInstance().setDisable(true);
			}
		});
	}

	@Override
	protected void onLoad() {

	}
	
	private List<String> validate() {
		List<String> errorsList = new ArrayList<String>();
		if (StringUtil.isEmpty(_person.getFirstName()) || StringUtil.isEmpty(_person.getLastName()) ||
				!_person.getFirstName().matches("[^\\d]+") || !_person.getLastName().matches("[^\\d]+")) {
			errorsList.add("- First And Last Name Should Be Populated And Not Contain Numbers");
		}
		if (_customer.getCustomerId() == null || _customer.getCustomerId().toString().length() >= 10) {
			errorsList.add("- Customer Id Should Be Populated And Have Less Than 10 Characters");
		}
		if (StringUtil.isEmpty(_systemUser.getUserPassword()) || _systemUser.getUserPassword().toString().length() < 8) {
			errorsList.add("- User Password Should Be Populated And Contain At Least 8 Characters");
		}
		if (!_entryPassword.equals(_systemUser.getUserPassword())) {
			if (!StringUtil.isEmpty(_systemUser.getUserPassword()) && !StringUtil.isEmpty(_userPasswordControlValidate.getText())) {
				if (!_systemUser.getUserPassword().equals(_userPasswordControlValidate.getText())) {
					errorsList.add("- Password Fields Does Not Match");
				}
			}
		}
		if (StringUtil.isEmpty(_person.getPhoneNumber()) || _person.getPhoneNumber().toString().length() != 10) {
			errorsList.add("- Phone Number Should Be Populated And Contain Exactly 10 Characters");
		}
		if (StringUtil.isEmpty(_address.getCity()) || !_address.getCity().matches("[^\\d]+") ||
				StringUtil.isEmpty(_address.getStreet()) || !_address.getStreet().matches("[^\\d]+")) {
			errorsList.add("- City And Street Name Should Be Populated And Not Contain Numbers");
		}
		if (StringUtil.isEmpty(_address.getHouse())) {
			errorsList.add("- House Number Should Be Populated");
		}
		return errorsList;
	}
	
	private void updateCustomer() throws IOException {
		IUpdate updateRequest = _client.getUpdateRequest();
		updateRequest.addEntity(_customer);
		updateRequest.addEntity(_systemUser);
		updateRequest.addEntity(_person);
		updateRequest.addEntity(_address);
		ResponseEvent responseEvent = _client.sendRequest(updateRequest);
		responseEvent.continueWith((response) -> {
			if (response.isPassed()) {
				_switcher.switchScene("UpdatePaymentDetailsScreen", _customer, _payment); 
			}
			else {
				UiHandler.showAlert(AlertType.ERROR, "Customer Update", "", response.getDescription());
			}
		});
	}

	@Override
	public void setParameters(IEntity[] entities) {
		super.setParameters(entities);
		for (IEntity entity : entities) {
			if (entity instanceof Customer) {
				_customer = (Customer) entity;
			}
			else if (entity instanceof SystemUser) {
				_systemUser = (SystemUser) entity;
				_entryPassword = _systemUser.getUserPassword();
			}
			else if (entity instanceof Person) {
				_person = (Person) entity;
			}
			else if (entity instanceof Address) {
				_address = (Address) entity;
			}
			else if (entity instanceof Payment) {
				_payment = (Payment) entity;
			}
		}
	}


	public Customer getCustomer() {
		return _customer;
	}

	public void setCustomer(Customer customer) {
		_customer = customer;
	}

	public Person getPerson() {
		return _person;
	}

	public void setPerson(Person person) {
		_person = person;
	}

	public Address getAddress() {
		return _address;
	}

	public void setAddress(Address address) {
		_address = address;
	}

	public SystemUser getSystemUser() {
		return _systemUser;
	}

	public void setSystemUser(SystemUser systemUser) {
		_systemUser = systemUser;
	}
}
